getting the below error in case page on contact page it is working fine,


TypeError: Cannot read properties of undefined (reading 'then')
    at Proxy.connectedCallback (https://static.lightning.force.com/swe96s.sfdc-cehfhs/modules/c/contact_Savings.js:3:6146)
    at eval (eval at <anonymous> (https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:1:1), <anonymous>:3:23715)
    at en.<anonymous> (https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:110:72153)
    at Ao (https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:49:44804)
    at https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:49:43730
    at Ko (https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:49:49324)
    at ho (https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:49:43714)
    at Bo (https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:49:48566)
    at br (https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:49:32977)
    at yr (https://static.lightning.force.com/swe96s.sfdc-cehfhs/auraFW/javascript/Nlh4MnI5b0JjcllDb0VRUl93WWtWUWdLNVAwNUkzRVNnOFJ1eVRYdHBvVVExMi42MjkxNDU2LjgzODg2MDg/aura_prod.js:49:32540)


import { LightningElement, api, wire, track } from 'lwc';
import { loadScript } from 'lightning/platformResourceLoader';
import CHART_JS from '@salesforce/resourceUrl/ChartJS';
import getSavingsData from '@salesforce/apex/ContactSavings_Controller.getSavingsDataSerialNumber';
import getsavingsPEAK from '@salesforce/apex/ContactSavings_Controller.getSavingsDataSerialNumber';
import getsavingsPUSH from '@salesforce/apex/ContactSavings_Controller.getSavingsDataSerialNumber';
import getsavingsFLEX from '@salesforce/apex/ContactSavings_Controller.getSavingsDataSerialNumber';
import getPVData from '@salesforce/apex/ContactSavings_ControllerV2.getPVDataSerialNumber'; 
import getActivePower from '@salesforce/apex/ContactSavings_ControllerV2.getActivepowerDataSerialNumber';
import getPVDataV2 from '@salesforce/apex/ContactSavings_ControllerV2.getPVData'; 
import getActivePowerV2 from '@salesforce/apex/ContactSavings_ControllerV2.getActivepowerData';  
import getElectricityPrices from '@salesforce/apex/ContactSavings_Controller.getElectricityPricesContact';
import getBatterySOC from '@salesforce/apex/ContactSavings_Controller.getBatterySOCContact';
import getBatterySOCall from '@salesforce/apex/ContactSavings_Controller.getBatterySOCContactall';
import getContactsByAccount from '@salesforce/apex/ContactSavings_Controller.getContactsByAccount';
import getContactsByAccountpartner from '@salesforce/apex/ContactSavings_Controller.getContactByAccountPartner';
//import saveAggregatedSavings from '@salesforce/apex/EXP_UserSavingsController.saveAggregatedSavings';
import { refreshApex } from '@salesforce/apex';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import USER_ID from '@salesforce/user/Id';
import getContactIdFromCase from '@salesforce/apex/ContactSavings_Controller.getSavingsDataCase';
import getInvertorname from '@salesforce/apex/ContactSavings_Controller.getinvertornames';
import getSavingsDataT from '@salesforce/apex/ContactSavings_Controller.getSavingsDataContact';
import getsavingsPEAKT from '@salesforce/apex/ContactSavings_Controller.getSavingsDataContact';
import getsavingsPUSHT from '@salesforce/apex/ContactSavings_Controller.getSavingsDataContact';
import getsavingsFLEXT from '@salesforce/apex/ContactSavings_Controller.getSavingsDataContact';
import labels from "./labels";
export default class contact_Savings extends LightningElement {

    label = labels;

    userId = USER_ID;
    @api objectApiName;
    @api recordId;
    @api accountId;
    @api contactId;
    @track selectedRange = 'hourly';
    @track selectedContactId;
    @track contacts = [];
    @track allSavingsData = []; 
    @track savingsData = [];
    @track peakData = [];
    @track pushData = []; 
    @track flexData = []; 
    @track pvData = []; // Added PV data tracking
    @track activePowerData = []; // Added Active Power data tracking
    @track timeLabels = []; 
    chart;
    chartjsInitialized = false;
    wiredSavingsResult;
    electricityData = [];
    batterySOCData = [];
    PEAKF = 'PEAK';
    PUSHF = 'PUSH';
    FLEXF = 'FLEX';
    ALLSAVING = 'ALLSAVINGS';
    @track nvertorsOptions = []; 
    @track selectdinvertors = 'All';
    

    
    // Dropdown options for time range
    timeRangeOptions = [
        { label: this.label.Hourly, value: 'hourly' },
        { label: this.label.Daily, value: 'daily' },
        { label: this.label.Weekly, value: 'weekly' },
        { label: this.label.Monthly, value: 'monthly' },
        { label: this.label.Yearly, value: 'yearly' }
    ];
 
    getRecordIdFromUrl() {
        const url = window.location.href;
        const match = url.match(/([a-zA-Z0-9]{15,18})/);
        return match ? match[1] : null;
    }
   
    get isPartnerPortal() {
        return this.accountId === 'False';
    }
    downloadChart() {
    const chartImage = this.chart.toBase64Image();

    const link = document.createElement('a');
    link.href = chartImage;
    link.download = 'savings-graph.png';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    }

    connectedCallback() {
        console.log('userid:', this.userId);
        console.log('Record ID from page:', this.recordId);
        console.log('Contact ID from property:', this.contactId);
        console.log('Account ID from property:', this.accountId);
 
        this.recordId = this.getRecordIdFromUrl();

        // Determine record type and set context
        if (this.recordId) {
            if (this.recordId.startsWith('003')) {
                this.selectedContactId = this.recordId;
                console.log('Contact record page:', this.selectedContactId);
            } else if (this.recordId.startsWith('001')) {
                this.accountId = this.recordId;
                console.log('Account record page:', this.accountId);
            } else if (this.recordId.startsWith('500')) { // Case record page
                getContactIdFromCase({ recordid: this.recordId })
                    .then(contactId => {
                        if (contactId) {
                            this.selectedContactId = contactId;
                            console.log('Case Contact ID:', contactId);
                            return refreshApex(this.wiredSavingsResult);
                        }
                    })
                    .catch(error => {
                        console.error('Case Contact Error:', error);
                        this.showNotification('Error', 'No contact found for this case', 'error');
                    });
            } else if (this.contactId) { // Other record pages with manual contact
                this.selectedContactId = this.contactId;
                console.log('Using provided Contact ID:', this.selectedContactId);
            }
        } else if (this.contactId) { // App/Home page usage
            this.selectedContactId = this.contactId;
            console.log('Using component Contact ID:', this.selectedContactId);
        }
   
        // Partner portal handling
        if (this.isPartnerPortal) {
            getContactsByAccountpartner()
                .then(data => {
                    console.log('Partner Contacts:', data);
                    this.contacts = data.map(contact => ({
                        label: contact.Name,
                        value: contact.Id
                    }));
                })
                .catch(error => console.error('Partner Error:', error));
        }
    }
@wire(getInvertorname, { contactid: '$selectedContactId' })
wiredinvertors({ error, data }) {
    if (data) {
        console.log('Invertor Data:', JSON.stringify(data));
        this.nvertorsOptions = data.map(invertor => ({
            label: invertor.Invertor,
            value: invertor.Serialnumber 
        }));
        this.nvertorsOptions.push({
            label: 'All',
            value: 'All'
        });
        console.log('Invertor Options:', this.nvertorsOptions); 
    } else if (error) {
        this.showNotification('Error', error.body.message, 'error');
        this.nvertorsOptions = [];
    } else {
        this.nvertorsOptions = [];
    }
}

    @wire(getContactsByAccount, { accountId: '$accountId' })
    wiredContacts({ error, data }) {
        if (data) {
            console.log(data);
            this.contacts = data.map(contact => ({
                label: contact.Name,
                value: contact.Id
            }));
            if (data.length > 0 && !this.contactId) {
                this.selectedContactId = data[0].Id;
            }
        } else if (error) {
            this.showNotification('Error', error.body.message, 'error');
        }
    }
 
    @wire(getContactsByAccountpartner)
    wiredContactsPartner({ error, data }) {
        if (this.isPartnerPortal) {
            if (data) {
                this.contacts = data.map(contact => ({
                    label: contact.Name,
                    value: contact.Id
                }));
                if (data.length > 0 && !this.contactId) {
                    this.selectedContactId = data[0].Id;
                }
            } else if (error) {
                this.showNotification('Error', error.body.message, 'error');
            }
        }
    }
 
    get contactOptions() {
        return this.contacts;
    }
 
    get hasAccountOrContact() {
        return true;
    }
 
    renderedCallback() {
        if (this.chartjsInitialized) return;
        loadScript(this, CHART_JS)
            .then(() => {
                this.chartjsInitialized = true;
                this.initializeChart();
            })
            .catch(error => console.error('Error loading Chart.js', error));
    }
 
    @wire(getSavingsData, { timeRange: '$selectedRange', contactId: '$selectedContactId', FEATURE: '$ALLSAVING' })
    wiredSavings(result) {
        this.wiredSavingsResult = result;
        console.log('totalsavings '+ result.data);
        this.handleSavingsData();
    }
 
    standardizeTimeLabel(label) {
        if (!label) return '';
       
        if (this.selectedRange === 'hourly') {
            const parts = label.split(' ');
            return parts.length > 1 ? parts[1].substring(0, 5) : label;
        } else if (this.selectedRange === 'daily') {
            return label.split(' ')[0];
        }
        return label;
    }
 
    handleSavingsData() {
        if (!this.selectedContactId) return;
    if(this.selectdinvertors !== 'All'){
        this.peakData = [];
        this.pushData = [];
        this.flexData = [];
        this.allSavingsData = [];
        this.savingsData = [];
        this.pvData = []; 
        this.activePowerData = []; 
        Promise.all([
            getsavingsPEAK({ timeRange: this.selectedRange, contactId: this.selectedContactId, FEATURE: this.PEAKF, Serialnumber: this.selectdinvertors }),
            getsavingsPUSH({ timeRange: this.selectedRange, contactId: this.selectedContactId, FEATURE: this.PUSHF, Serialnumber: this.selectdinvertors }),
            getsavingsFLEX({ timeRange: this.selectedRange, contactId: this.selectedContactId, FEATURE: this.FLEXF, Serialnumber: this.selectdinvertors }),
            getSavingsData({ timeRange: this.selectedRange, contactId: this.selectedContactId, FEATURE: this.ALLSAVING, Serialnumber: this.selectdinvertors }),
            getPVData({ timeRange: this.selectedRange, contactId: this.selectedContactId, Serialnumber: this.selectdinvertors }), 
            getActivePower({ timeRange: this.selectedRange, contactId: this.selectedContactId, Serialnumber: this.selectdinvertors }) 
        ])
        .then(([peakData, pushData, flexData, allSavingsData, pvData, activePowerData]) => { 
            peakData = Array.isArray(peakData) ? peakData : [];
            pushData = Array.isArray(pushData) ? pushData : [];
            flexData = Array.isArray(flexData) ? flexData : [];
            allSavingsData = Array.isArray(allSavingsData) ? allSavingsData : [];
            pvData = Array.isArray(pvData) ? pvData : []; 
            activePowerData = Array.isArray(activePowerData) ? activePowerData : []; 
            console.log(
                'Activepower ' + JSON.stringify(activePowerData) );
            
    
            const allTimeLabels = new Set();
            [peakData, pushData, flexData, allSavingsData, pvData, activePowerData].forEach(dataset => { 
                dataset.forEach(item => {
                    if (item?.label) allTimeLabels.add(this.standardizeTimeLabel(item.label));
                });
            });
    
            this.timeLabels = Array.from(allTimeLabels).sort();
    
            this.peakData = this.alignDataToTimeLabels(peakData);
            this.pushData = this.alignDataToTimeLabels(pushData);
            this.flexData = this.alignDataToTimeLabels(flexData);
            this.allSavingsData = this.alignDataToTimeLabels(allSavingsData);
            this.pvData = this.alignPVDataToTimeLabels(pvData); 
            this.activePowerData = this.alignActivePowerDataToTimeLabels(activePowerData); 
            console.log(
                'Activepower#2 ' + JSON.stringify(activePowerData));
            this.calculateTotalSavings();
    
            if (this.selectedRange === 'hourly') {
                this.fetchAdditionalData();
            } else {
                this.initializeChart();
            }
        })
        .catch(error => {
            console.error('Data Load Error:', error);
            this.showNotification('Error', 'Failed to load savings data', 'error');
        });
    }
else{
    this.peakData = [];
    this.pushData = [];
    this.flexData = [];
    this.allSavingsData = [];
    this.savingsData = [];
    this.pvData = []; 
    this.activePowerData = []; 

    Promise.all([
        getsavingsPEAKT({ timeRange: this.selectedRange, contactId: this.selectedContactId, FEATURE: this.PEAKF }),
        getsavingsPUSHT({ timeRange: this.selectedRange, contactId: this.selectedContactId, FEATURE: this.PUSHF }),
        getsavingsFLEXT({ timeRange: this.selectedRange, contactId: this.selectedContactId, FEATURE: this.FLEXF }),
        getSavingsDataT({ timeRange: this.selectedRange, contactId: this.selectedContactId, FEATURE: this.ALLSAVING }),
        getPVDataV2({ timeRange: this.selectedRange, contactId: this.selectedContactId}), 
        getActivePowerV2({ timeRange: this.selectedRange, contactId: this.selectedContactId})
    ])
    .then(([peakData, pushData, flexData, allSavingsData, pvData, activePowerData]) => { 
        peakData = Array.isArray(peakData) ? peakData : [];
        pushData = Array.isArray(pushData) ? pushData : [];
        flexData = Array.isArray(flexData) ? flexData : [];
        allSavingsData = Array.isArray(allSavingsData) ? allSavingsData : [];
        pvData = Array.isArray(pvData) ? pvData : []; 
        activePowerData = Array.isArray(activePowerData) ? activePowerData : []; 

        const allTimeLabels = new Set();
        [peakData, pushData, flexData, allSavingsData, pvData, activePowerData].forEach(dataset => { 
            dataset.forEach(item => {
                if (item?.label) allTimeLabels.add(this.standardizeTimeLabel(item.label));
            });
        });

        this.timeLabels = Array.from(allTimeLabels).sort();

        this.peakData = this.alignDataToTimeLabels(peakData);
        this.pushData = this.alignDataToTimeLabels(pushData);
        this.flexData = this.alignDataToTimeLabels(flexData);
        this.allSavingsData = this.alignDataToTimeLabels(allSavingsData);
        this.pvData = this.alignPVDataToTimeLabels(pvData); 
        this.activePowerData = this.alignActivePowerDataToTimeLabels(activePowerData); 

        this.calculateTotalSavings();

        if (this.selectedRange === 'hourly') {
            this.fetchAdditionalData();
        } else {
            this.initializeChart();
        }
    })
    .catch(error => {
        console.error('Data Load Error:', error);
        this.showNotification('Error', 'Failed to load savings data', 'error');
    });

}    
}

    alignPVDataToTimeLabels(data) {
        if (!data || data.length === 0) return [];
        
        const dataMap = new Map();
        data.forEach(item => {
            const standardLabel = this.standardizeTimeLabel(item.label);
            dataMap.set(standardLabel, item.totalpv || 0);
        });
        
        return this.timeLabels.map(label => ({
            label,
            totalpv: dataMap.get(label) || 0
        }));
    }

    alignActivePowerDataToTimeLabels(data) {
    if (!data || data.length === 0) return [];
    
    const dataMap = new Map();
    data.forEach(item => {
        const standardLabel = this.standardizeTimeLabel(item.label);
        dataMap.set(standardLabel, item.totalAP || 0); 
    });
    
    return this.timeLabels.map(label => ({
        label,
        totalAP: dataMap.get(label) || 0 
    }));
}

    alignDataToTimeLabels(data) {
        if (!data || data.length === 0) return [];
       
        const dataMap = new Map();
        data.forEach(item => {
            const standardLabel = this.standardizeTimeLabel(item.label);
            dataMap.set(standardLabel, item.totalSavings || 0);
        });
       
        return this.timeLabels.map(label => ({
            label,
            totalSavings: dataMap.get(label) || 0
        }));
    }
 
    fetchAdditionalData() {
if(this.selectdinvertors !== 'All'){
        Promise.all([
            getElectricityPrices({ timeRange: this.selectedRange,
                contactId: this.selectedContactId }),   
            getBatterySOC({
                timeRange: this.selectedRange,
                contactId: this.selectedContactId,
		        Serialnumber: this.selectdinvertors
            })
        ]).then(([electricityResults, socResults]) => {
            console.log('Raw electricity data:', JSON.stringify(electricityResults));
            console.log('Raw battery SOC data:', JSON.stringify(socResults));
           
            this.electricityData = this.alignAdditionalDataToTimeLabels(electricityResults, 'price');
            this.batterySOCData = this.alignAdditionalDataToTimeLabels(socResults, 'soc');
           
            this.initializeChart();
        }).catch(error => {
            console.error('Error fetching additional data:', error);
            this.showNotification('Error', 'Failed to load battery data', 'error');
        });}
else{
        Promise.all([
                    getElectricityPrices({ timeRange: this.selectedRange,
                        contactId: this.selectedContactId }),   
                    getBatterySOCall({
                        timeRange: this.selectedRange,
                        contactId: this.selectedContactId
                    })
                ]).then(([electricityResults, socResults]) => {
                    console.log('Raw electricity data:', JSON.stringify(electricityResults));
                    console.log('Raw battery SOC data:', JSON.stringify(socResults));
                
                    // Align electricity and SOC data to the same time labels
                    this.electricityData = this.alignAdditionalDataToTimeLabels(electricityResults, 'price');
                    this.batterySOCData = this.alignAdditionalDataToTimeLabels(socResults, 'soc');
                
                    this.initializeChart();
                }).catch(error => {
                    console.error('Error fetching additional data:', error);
                    this.showNotification('Error', 'Failed to load battery data', 'error');
                });

            }
            }
   
    alignAdditionalDataToTimeLabels(data, valueField) {
        if (!data || data.length === 0) return [];
       
        const dataMap = new Map();
        data.forEach(item => {
            const standardLabel = this.standardizeTimeLabel(item.label);
            dataMap.set(standardLabel, item[valueField] || 0);
        });
       
        return this.timeLabels.map(label => ({
            label,
            [valueField]: dataMap.get(label) || 0
        }));
    }
    handleInvertorChange(event) {
        this.selectdinvertors = event.detail.value;
        console.log('Selected invertor: ',this.selectdinvertors);
        this.handleSavingsData();
    }
 
    handleContactChange(event) {
        this.selectedContactId = event.detail.value;
        this.handleSavingsData();
    }
 
    handleTimeRangeChange(event) {
        this.selectedRange = event.detail.value;
        this.handleSavingsData();
    }
 
    calculateTotalSavings() {
        this.savingsData = this.timeLabels.map((label, index) => {
            const peak = this.peakData[index]?.totalSavings || 0;
            const push = this.pushData[index]?.totalSavings || 0;
            const flex = this.flexData[index]?.totalSavings || 0;
            const chargeDischarge = this.allSavingsData[index]?.totalSavings || 0;
    
            return {
                label,
                totalSavings: peak + push + flex + chargeDischarge,
                components: { peak, push, flex, chargeDischarge }
            };
        });
    }
    buildChartDatasets() {
        const datasets = [
            {
                label: `${this.label.totalsavings} (${this.selectedRange})`,
                data: this.savingsData.map(d => d.totalSavings),
                borderColor: '#05445e',
                //backgroundColor: 'rgba(70, 238, 98, 0.1)',
                tension: 0.4,
                //fill: true
            },
            {
                label: this.label.peak,
                data: this.peakData.map(d => d.totalSavings),
                borderColor: '#189ab4',
                tension: 0.4
            },
            {
                label: this.label.push,
                data: this.pushData.map(d => d.totalSavings),
                borderColor: '#75e6da',
                tension: 0.4
            },
            {
                label: this.label.flex,
                data: this.flexData.map(d => d.totalSavings),
                borderColor: '#d4f1f4',
                tension: 0.4
            },
            {
                label: this.label.chargedischarge,
                data: this.allSavingsData.map(d => d.totalSavings),
                borderColor: '#ff9f40',
                tension: 0.4,
                borderDash: [5, 5]
            },
            {
                label: this.label.PVemoji,
                data: this.pvData.map(d => d.totalpv),
                borderColor: '#4CAF50',
                tension: 0.4,
                yAxisID: 'y3' 
            },
            {
                label: this.label.apemoji,
                data: this.activePowerData.map(d => d.totalAP),
                borderColor: '#9C27B0', 
                tension: 0.4,
                yAxisID: 'y4' 
            }
        ];
    
        if (this.selectedRange === 'hourly') {
            datasets.push(
                {
                    label: this.label.Elecemoji,
                    data: this.electricityData.map(d => d.price),
                    borderColor: '#FF6384',
                    yAxisID: 'y1',
                    tension: 0.4
                },
                {
                    label: this.label.SOCemoji,
                    data: this.batterySOCData.map(d => d.soc),
                    borderColor: '#00FF00',
                    yAxisID: 'y2',
                    tension: 0.4
                }
            );
        }
    
        return datasets;
    }
    
 
    initializeChart() {
        const canvas = this.template.querySelector('canvas');
        if (!canvas) return;
    
        if (this.chart) {
            this.chart.destroy();
        }
    
        const ctx = canvas.getContext('2d');
    
        if (this.timeLabels.length === 0) {
            console.log('No data available to display chart');
            return;
        }
    
        const datasets = this.buildChartDatasets(); 
    
        const scales = {
            y: {
                title: { display: true, text: this.label.Savings},
                beginAtZero: true
            },
            x: {
                title: {
                    display: true,
                    text: this.selectedRange === 'hourly' ? 'Hour' : 'Time Period'
                }
            },
            y3: {
                title: { display: true, text: this.label.pvproduction },
                position: 'right',
                grid: { drawOnChartArea: false },
                beginAtZero: true
            },
            y4: {
                title: { display: true, text: this.label.Activepower },
                position: 'right',
                grid: { drawOnChartArea: false },
                beginAtZero: true
            }
        };
    
        if (this.selectedRange === 'hourly') {
            scales.y1 = {
                title: { display: true, text: this.label.price },
                position: 'right',
                grid: { drawOnChartArea: false }
            };
            scales.y2 = {
                title: { display: true, text: 'SOC (%)' },
                position: 'right',
                grid: { drawOnChartArea: false },
                suggestedMax: 100
            };
        }
    
        this.chart = new window.Chart(ctx, {
            type: 'line',
            data: {
                labels: this.timeLabels,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: { font: { size: 12 } },
                        onClick: function (e, legendItem, legend) {
                            const index = legendItem.datasetIndex;
                            const ci = legend.chart;
                            const meta = ci.getDatasetMeta(index);
                            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
                            ci.update();
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                const label = context.dataset.label || '';
                                const value = context.parsed.y;
    
                                if (label.includes('Savings')) {
                                    return `${label}: ${value.toFixed(2)}`;
                                } else if (label.includes('Price')) {
                                    return `${label}: ${value.toFixed(2)} SEK/kWh`;
                                } else if (label.includes('SOC')) {
                                    return `${label}: ${value.toFixed(0)}%`;
                                } else if (label.includes('PV Production')) {
                                    return `${label}: ${value.toFixed(2)} kWh`;
                                } else if (label.includes('Active Power')) {
                                    return `${label}: ${value.toFixed(2)} kW`;
                                }
                                return `${label}: ${value}`;
                            }
                        }
                    }
                },
                scales: scales
            }
        });
    }
    
 
    showNotification(title, message, variant) {
        this.dispatchEvent(new ShowToastEvent({ title, message, variant }));
    }
}